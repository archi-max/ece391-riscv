name: "Setup RISC-V toolchain (Ubuntu)"
description: "Installs RISC-V toolchain + exports bundled compat headers."
inputs:
  apt-cache:
    description: "Cache APT downloads"
    required: false
    default: 'true'
  cache-key-suffix:
    description: "Bump to bust APT cache"
    required: false
    default: 'v1'

runs:
  using: "composite"
  steps:
    - name: Prep APT cache
      if: inputs.apt-cache == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.apt-cache/archives
          ~/.apt-cache/lists
        key: ${{ runner.os }}-apt-riscv-${{ inputs.cache-key-suffix }}
        restore-keys: |
          ${{ runner.os }}-apt-riscv-

    - name: Install toolchain and QEMU
      shell: bash
      run: |
        set -euxo pipefail
        
        echo 'set man-db/auto-update false' | sudo debconf-communicate
        sudo rm -f /var/lib/man-db/auto-update || true
        
        if [[ -d "$HOME/.apt-cache/archives" ]]; then
          sudo apt-get -o Dir::Cache::archives="$HOME/.apt-cache/archives" \
                       -o Dir::State::lists="$HOME/.apt-cache/lists" update
          sudo apt-get -o Dir::Cache::archives="$HOME/.apt-cache/archives" \
                       -o Dir::State::lists="$HOME/.apt-cache/lists" \
                       install -y --no-install-recommends \
                       build-essential make python3 ca-certificates \
                       gcc-riscv64-unknown-elf binutils-riscv64-unknown-elf \
                       qemu-system-misc
        else
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
               build-essential make python3 ca-certificates \
               gcc-riscv64-unknown-elf binutils-riscv64-unknown-elf \
               qemu-system-misc
        fi

    # expose bundled headers without checking out anything in the main repo
    - name: Export CPATH to bundled headers
      shell: bash
      run: |
        set -euxo pipefail
        # repo root is three levels up from ".github/actions"
        ROOT="$(cd "${GITHUB_ACTION_PATH}/../../.." && pwd)"
        HDRS=""
        [ -d "${ROOT}/include" ] && HDRS="${HDRS}:${ROOT}/include"
        [ -d "${ROOT}/include/compat" ] && HDRS="${HDRS}:${ROOT}/include/compat"
        # also cover headers colocated under the action dir, just in case
        [ -d "${GITHUB_ACTION_PATH}/include" ] && HDRS="${HDRS}:${GITHUB_ACTION_PATH}/include"
        [ -d "${GITHUB_ACTION_PATH}/compat/include" ] && HDRS="${HDRS}:${GITHUB_ACTION_PATH}/compat/include"

        # prepend without leaving a trailing ":" (which would add ".")
        JOINED="${HDRS#:}"
        echo "CPATH=${JOINED}${CPATH:+:$CPATH}" >> "$GITHUB_ENV"
        echo "C_INCLUDE_PATH=${JOINED}${C_INCLUDE_PATH:+:$C_INCLUDE_PATH}" >> "$GITHUB_ENV"

    - name: Sanity check memory.h
      shell: bash
      run: |
        set -euxo pipefail
        test -f "${GITHUB_ACTION_PATH}/../../../../include/memory.h" || ls -l "${GITHUB_ACTION_PATH}/../../../../include" || true
        cat >/tmp/t.c <<'EOF'
        #include <memory.h>
        int main(void){return 0;}
        EOF
        riscv64-unknown-elf-gcc -c /tmp/t.c